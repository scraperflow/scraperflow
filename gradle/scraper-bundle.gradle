def version = '0.12.0'
def api = '0.10'

//def getGitHash = { ->
//    def stdout = new ByteArrayOutputStream()
//    exec {
//        commandLine 'git', 'rev-parse', '--short', 'HEAD'
//        standardOutput = stdout
//    }
//    return stdout.toString().trim()
//}

// output module jars
subprojects {
    apply plugin: 'java'
    tasks.withType(Jar) {
        destinationDir = file("$rootDir/build/modules")
    }

    task copyDependencies(type: Copy) {
        from configurations.default
        into "$rootDir/build/module-deps"
    }
}


task bundleAll(dependsOn: [':bundleFatJar', ':bundleApi', ':bundleCore']) { }

task bundleFatJar(type: Jar) { t ->
    dependsOn subprojects.collect { it.tasks.withType(Jar) }

    manifest { attributes 'Main-Class': 'scraper.app.Scraper' }
    from {
        project(':scraper-app').configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    from {
        project(':scraper-app').sourceSets.main.output
    }

//    archiveFileName = "Scraper-${api}-${getGitHash()}-bundled.jar"
    archiveFileName = "scraper-${version}-bundled.jar"
    destinationDirectory = file("$rootDir/build/libs")
}

task bundleCore(type: Jar, dependsOn: [':scraper-app:jar', ':scraper-core:jar']) {
    manifest { attributes 'Main-Class': 'scraper.app.Scraper' }
    subprojects.each {s ->
        // should be a better way to exclude sub projects
        if(!s.toString().contains('scraper-nodes') && !s.toString().contains('scraper-plugins')) {
            from {
                s.sourceSets.main.output
            }
        }
    }

    from {
        project(':scraper-app').configurations.compileClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    archiveFileName = "scraper-${version}-core.jar"
    destinationDirectory = file("$rootDir/build/libs")
}

task bundleApi(type: Jar, dependsOn: ':scraper-api:jar') {
    from {
        project(":scraper-api").sourceSets.main.output
    }

    archiveFileName = "scraper-${api}-api.jar"
    destinationDirectory = file("$rootDir/build/libs")
}


clean.doLast {
    file(new File(projectDir, "/build")).deleteDir()
}

