// add each plugin as a runtime dependency for the main app
subprojects.each {
    def plugin = it.name
    project(':scraper-app') {
        dependencies {
            // for runtime
            runtimeOnly project(":scraper-plugins:${plugin}")
            testRuntimeOnly project(":scraper-plugins:${plugin}")
        }
    }
}

// add every node project as a test dependency for every plugin
subprojects.each { itp ->
    // for each plugin
    def plugin = itp.name
    // add every node project as dependency
    project(":scraper-nodes").subprojects.each{ itn ->
        def nodes = itn.name
        project(":scraper-plugins:${plugin}") {
            afterEvaluate{
                dependencies {
                    testImplementation project(":scraper-nodes:${nodes}")
                }
            }
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    sourceCompatibility = 1.11

    // repository configuration
    repositories {
        mavenCentral()
        jcenter()
    }


    apply from: '../gradle/gradle-module-fix.gradle'
    apply from: '../../gradle/gradle-test-resources-fix.gradle'

    tasks.withType(Jar) {
        destinationDirectory = file("$rootDir/build/libs/plugins-only")
    }

    configurations {
        provided
        implementation.extendsFrom provided
    }

    dependencies {
        // core api + transitive dependencies
        implementation project(':scraper-core')
        implementation project(':scraper-utils')
    }

    task bundleDependenciesOnly(type: Jar) {
        from { configurations.provided.collect { it.isDirectory() ? it : zipTree(it) } }
        destinationDirectory = file("$rootDir/build/libs/plugins-dependencies")
//        with jar
    }

    task bundlePlugin(type: Jar) {
        from { configurations.provided.collect { it.isDirectory() ? it : zipTree(it) } }
        destinationDirectory = file("$rootDir/build/libs/plugins-bundled")
        with jar
    }
}
