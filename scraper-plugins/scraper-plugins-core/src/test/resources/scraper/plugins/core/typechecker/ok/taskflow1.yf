---
name: full
graphs:
  start:
    - type: IntRangeNode
      from: 1
      to: 1
      collect: "False"
      streamTarget: A

  A: [{type: PipeNode, pipeTargets: [B, C]}]
  B: [{type: RetryNode, retryTarget: E1}]
  E1: [{type: HttpRequestNode, url: "?page={i}"}]

  C:
    - type: RegexNode
      content: "{response}"
      regex: "notimportant"
      groups:
    - type: MapNode
      list: "{output}"
      mapTarget: D


  D:
    - type: EchoNode
      put: "gid"
      value: "{{element}@gid}"
    - {type: ForkNode, forkTargets: [E, F]}

  E:
    - type: FileExistsNode
      path: "path/{{element}@gid}.{{element}@format}"
    - type: IfThenElseNode
      condition: "{exists}"
      falseTarget: G

  G:
    - type: RetryNode
      retryTarget: H

  H:
    - type: HttpRequestNode
      url: "{{element}@tUrl}"
      put: thumbContent
      expectedResponse: FILE
      path: "path/{{element}@gid}.{{element}@format}"


  F:
    - type: FileExistsNode
      path: "path/{{element}@gid}.json"
    - type: IfThenElseNode
      condition: "{exists}"
      falseTarget: I

  I: [{type: RetryNode, retryTarget: J}]

  J:
    - type: HttpRequestNode
      url: "?{{element}@gid}/"

    - type: RegexNode
      content: "{response}"
      collect: true
      regex: "notimportant"
      groups:

    - type: MapNode
      list: "{output}"
      mapTarget: K

  K:
    - type: JsonStringToObjectNode
      jsonString: "{{element}@json}"
      jsonObject: "json"

    - type: CleanJsonObjectNode
      jsonObject: "{json}"
      cleanedObject: "json"
      clean: [] # not important

    - type: ObjectToJsonStringNode
      object: "{json}"
      result: "json"

    - type: WriteLineToFileNode
      output: "path/{gid}.json"
      line: "{json}"
      overwrite: true
